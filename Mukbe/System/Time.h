#pragma once



//Singleton
class Time
{
public:
	static bool Stopped() { return isTimerStopped; }
	//< 이전 프레임으로부터 경과시간
	static float Delta() { return isTimerStopped ? 0.0f : timeElapsed; }
	static float Tick() { return InvLockFPS; }
	void Update();
	void Print();

	void Start();
	void Stop();

	float FPS() const { return framePerSecond; }
	float Running() const { return runningTime; }

	float GetWorldTime() { return worldTime; }
	void AddWorldTime(float val) { worldTime += val; }

	UINT GetHour() { return hour; }
	UINT GetMinute() { return minute; }
	float GetDayTimeRatio() { return dayTimeRatio; }

	float GetLockFPS() { return lockFPS; }
	void SetLockFPS(float val);
private:
	
	void UpdateWorldTime();
private:
	static bool isTimerStopped;///< 타이머 중지
	static float timeElapsed;///< 이전 프레임으로부터 경과시간
	static float InvLockFPS;


	INT64 ticksPerSecond;///< 초당 틱카운트
	INT64 currentTime;///< 현재 시간
	INT64 lastTime;///< 이전시간
	INT64 lastFPSUpdate;///< 마지막 FPS 업데이트 시간
	INT64 fpsUpdateInterval;///< fps 업데이트 간격

	UINT frameCount;///< 프레임 수
	float runningTime;///< 진행 시간
	float framePerSecond;///< FPS
	float lockFPS;

	float worldTime;
	UINT hour;
	UINT minute;

	const float secondsPerDay;
	float dayTimeRatio;


	SingletonHeader(Time)
};